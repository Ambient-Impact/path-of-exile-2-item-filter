# Don't use the slim image because that doesn't have make.
#
# @see https://hub.docker.com/r/library/python/tags/
image: python:latest

stages:
  - .pre
  - build
  - package
  - release
  - deploy
  - .post

variables:
  ITEM_FILTER_DIR: AmbientImpactItemFilter
  ITEM_FILTER_FILE: Ambient.Impact.filter
  PIP_CACHE_DIR: '$CI_PROJECT_DIR/.cache/pip'
  ARCHIVE_NAME: $ITEM_FILTER_FILE.zip
  PACKAGE_NAME: $ITEM_FILTER_FILE

cache:
  paths:
    # https://pip.pypa.io/en/stable/topics/caching/
    - '$CI_PROJECT_DIR/.cache/pip'
    # We're not caching the venv so that we can test installation of it while
    # building.

# Runs the make build process to build the item filter.
build:
  stage: build
  before_script:
    - apt-get -qq update
    - apt-get install -y jq
  script:
    - make build filter-dir=$ITEM_FILTER_DIR outfile=$ITEM_FILTER_FILE
  rules:
    - if:
      changes:
        - $ITEM_FILTER_DIR/**/*.j2
        - $ITEM_FILTER_DIR/**/*.json
        - .gitlab-ci.yml
        - makefile
  artifacts:
    paths:
      - $ITEM_FILTER_DIR/sounds/**/*.mp3
      - $ITEM_FILTER_DIR/sounds/**/*.md
      - $ITEM_FILTER_FILE
      - license.md
      - readme.md

# Packages the built item filter into a ZIP file.
package:
  stage: build
  needs:
    - job: build
      artifacts: true
  before_script:
    - apt-get -qq update
    - apt-get install -y zip
  script:
    - zip -9 ${ARCHIVE_NAME} ${ITEM_FILTER_FILE} license.md readme.md
    - find "${ITEM_FILTER_DIR}/sounds" \( -name "*.mp3" -o -name "*.md" \) -exec zip -9 ${ARCHIVE_NAME} '{}' \; | sort -V
  artifacts:
    paths:
      - $ARCHIVE_NAME

# Hidden job for shared release settings.
.release-only:
  rules:
    # Run this when a tag is created using semantic versioning.
    #
    # @see https://stackoverflow.com/questions/73003885/trigger-gitlab-ci-pipeline-only-when-there-is-a-new-tag-with-some-rules
    - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+.*/

# Publish the built ZIP to the generic packages registry so that it can be
# stored permanently and linked from the release for this tag.
#
# @see https://docs.gitlab.com/user/packages/generic_packages/#publish-a-single-file
publish:
  extends: .release-only
  stage: release
  needs:
    - job: package
      artifacts: true
  before_script:
    - apt-get -qq update
    - apt-get install -y jq
  script:
    # This publishes the package.
    #
    # @todo Fail if not a 2xx response code; for example, a 4xx indicates a
    #   failure. curl does not do this by default.
    - 'curl --location --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${ARCHIVE_NAME} ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${CI_COMMIT_TAG}/${ARCHIVE_NAME}'
    # Now we need to get the published package ID that GitLab generated.
    - 'PACKAGE_ID=$(curl --location --header "JOB-TOKEN: $CI_JOB_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages?package_version=${CI_COMMIT_TAG}&status=default&package_type=generic" --silent | jq ".[0].id")'
    # Now we use the package ID to fetch that package's files, filtering them
    # down to the archive file name, and then saving the file ID.
    - 'FILE_ID=$(curl --location --header "JOB-TOKEN: $CI_JOB_TOKEN"         "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/${PACKAGE_ID}/package_files" --silent | jq ".[] | select(.file_name == \"${ARCHIVE_NAME}\").id")'
    # Now that we have the file ID, we can build the URL to download the file.
    - 'FILE_URL=${CI_SERVER_URL}/${CI_PROJECT_PATH}/-/package_files/${FILE_ID}/download'
    # Lastly, we save it to an ENV file that gets passed to the next stage.
    - 'echo "FILE_URL=${FILE_URL}" > package.env'
  artifacts:
    reports:
      # The 'dotenv' key for reports automagically makes the variables within
      # available in subsequent stages that need this one.
      #
      # @see https://gitlab.com/guided-explorations/cfg-data/write-ci-cd-variables-in-pipeline/-/blob/master/.gitlab-ci.yml
      dotenv: package.env

release:
  extends: .release-only
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build
      artifacts: true
    - job: publish
      artifacts: true
  script:
    - echo "Creating release ${CI_COMMIT_TAG}."
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: '$ARCHIVE_NAME'
          url: '${FILE_URL}'
          filepath: '/assets/$ARCHIVE_NAME'
